from io import BytesIO
from flask import Flask, make_response, request, jsonify
import numpy as np
import pandas as pd
import os
from PIL import Image
from create_csv.process_images import process_image
from create_model import create_model
from flask_cors import CORS
import base64

app = Flask(__name__)
CORS(app)

model = create_model('data.csv')

def get_predicted_value(model, data):
    return model.predict(data)

characters = {
    1.0: "අ",
    21.0: "ක",
    54.0: "ව",
    12.0: "ර"
}

@app.route("/")
def home():
    return make_response({
        "home": "Home"
    })

@app.route("/get_ocr", methods=['GET'])
def get_ocr():

    try:
        if(request.method=='GET'):
        #if 'image' not in request.files:
        #    print("not image")
        #    return 'not image in form'
        #image = request.files['image']
            image = request.args.get("image")
            #print(image)
            #image_decode = base64.b64decode(image)
            #image_result = open('image.png', 'wb')
            #image_result.write(image_decode)
            #print(image_decode)
            
            #print(image)

            ii = image.replace("data:image/png;base64,","")
            ii = ii.replace(" ", "+")
            print(ii)

            img = ''
            #print(img)

            #with open("image.png", "wb") as fh:
            #    fh.write(base64.b64decode(image))

            im = Image.open(BytesIO(base64.b64decode(ii)))
            im.save('save/image.png', 'PNG')
            #upload_image(image)
            #img = Image.open(image.filename)
            #img.show()
            arr = process_image('save/image.png')
            arr = arr.reshape(1,-1)
            print(arr)
            y_predict = get_predicted_value(model, arr)
            print(y_predict)
            print(characters[y_predict[0]])

            return jsonify(predicted_resilt=characters[y_predict[0]])

    except Exception as e:
        print(e)
        return make_response({
            "error": e
        }) 


def upload_image(image):
    path = os.path.join('save/image.png')
    image.save(path)

if __name__ == "__main__":
    app.debug(True)
    app.run(host='0.0.0.0')